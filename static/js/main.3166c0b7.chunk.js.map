{"version":3,"sources":["logo.svg","serviceWorker.js","App.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","App","state","isRun","data","dataImport","immutableDataFile","seconds","value","label","type","dataFile","createRef","handleSortData","_this","setState","Object","toConsumableArray","sort","a","b","Math","random","handeInterval","_this$state","flagMix","flag","clearInterval","timer","setInterval","createRandomData","handleImportDataFile","reader","FileReader","onload","e","dataJson","JSON","parse","target","result","readAsText","current","files","error","console","log","rdIndex","floor","length","newItem","objectSpread","newData","_this2","this","_this$state2","react_default","createElement","className","Container","fluid","Button","color","size","onClick","Label","name","ref","onChange","react_select_esm","placeholder","options","v","src","logo","alt","Row","map","d","Col","key","word","concat","spelling","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6gDAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2LCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oNCyISC,6MAnJbC,MAAQ,CACNC,OAAO,EACPC,KAAMC,EACNC,kBAAmB,KACnBC,QAAS,CAAEC,MAAO,EAAKC,MAAO,QAC9BC,KAAM,CAAEF,MAAO,EAAGC,MAAO,uBAE3BE,SAAWC,wBAMXC,eAAiB,WAAM,IACbT,EAASU,EAAKZ,MAAdE,KACRU,EAAKC,SAAS,CACZX,KAAMY,OAAAC,EAAA,EAAAD,CAAIZ,GAAMc,KAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,gBAI9CC,cAAgB,WAAM,IAAAC,EACgCV,EAAKZ,MAAjDC,EADYqB,EACZrB,MAAOG,EADKkB,EACLlB,kBAAmBC,EADdiB,EACcjB,QAASG,EADvBc,EACuBd,KACrCe,EAAUJ,KAAKC,SAAW,GAAM,EAAI,EACpCI,EAAsB,IAAfhB,EAAKF,MAAciB,EAAUf,EAAKF,MAE/CmB,cAAc9B,OAAO+B,OACjBzB,IACFN,OAAO+B,MAAQC,YAAY,WACzBf,EAAKC,SAAS,CAAEX,KAAMU,EAAKgB,iBAAiBxB,GAAqBD,EAAYqB,MAC5D,IAAhBnB,EAAQC,WAIfuB,qBAAuB,WACrB,IACE,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GACf,IAAMC,EAAWC,KAAKC,MAAMH,EAAEI,OAAOC,QACrC1B,EAAKC,SAAS,CAAEX,KAAMgC,EAAU9B,kBAAmB8B,KAErDJ,EAAOS,WAAW3B,EAAKH,SAAS+B,QAAQC,MAAM,IAC9C,MAAOC,GACPC,QAAQC,IAAIF,OAIhBd,iBAAmB,SAAC1B,EAAMsB,GACxB,IAAMqB,EAAU1B,KAAK2B,MAAM3B,KAAKC,SAAUlB,EAAK6C,QACzCC,EAAOlC,OAAAmC,EAAA,EAAAnC,CAAA,GAAQZ,EAAK2C,GAAb,CAAuBrB,SAC9B0B,EAAOpC,OAAAC,EAAA,EAAAD,CAAOZ,GAIpB,OAFAgD,EAAQL,GAAWG,EACnBL,QAAQC,IAAIM,GACLA,wHAIA,IAAAC,EAAAC,KAAAC,EACgCD,KAAKpD,MAApCC,EADDoD,EACCpD,MAAOC,EADRmD,EACQnD,KAAMG,EADdgD,EACchD,QAASG,EADvB6C,EACuB7C,KAK9B,OAHA4C,KAAK/B,gBACLsB,QAAQC,IAAI3C,GAGVqD,EAAArC,EAAAsC,cAAA,OAAKC,UAAU,OACbF,EAAArC,EAAAsC,cAACE,EAAA,EAAD,CAAWC,OAAK,GACdJ,EAAArC,EAAAsC,cAAA,OAAKC,UAAU,oBACbF,EAAArC,EAAAsC,cAACI,EAAA,EAAD,CACEH,UAAU,wBAAwBI,MAAO3D,EAAQ,SAAW,UAAW4D,KAAK,KAC5EC,QAAS,kBAAMX,EAAKtC,SAAS,CAAEZ,OAAQA,MAEtCA,EAAQ,qBAAa,0BAExBqD,EAAArC,EAAAsC,cAACI,EAAA,EAAD,CACEH,UAAU,wBAAwBI,MAAM,UAAUC,KAAK,KACvDC,QAASV,KAAKzC,gBAFhB,oBAMA2C,EAAArC,EAAAsC,cAACQ,EAAA,EAAD,CAAOP,UAAU,gDACdb,QAAQC,IAAIQ,KAAK3C,SAAS+B,SAC1BY,KAAK3C,SAAS+B,SAAWY,KAAK3C,SAAS+B,QAAQC,MAAM,GAAKW,KAAK3C,SAAS+B,QAAQC,MAAM,GAAGuB,KAAO,iBACjGV,EAAArC,EAAAsC,cAAA,SACEC,UAAU,SAAShD,KAAK,OACxByD,IAAKb,KAAK3C,SACVyD,SAAUd,KAAKvB,wBAGnByB,EAAArC,EAAAsC,cAACY,EAAA,EAAD,CACEX,UAAU,2BACVY,YAAY,UACZC,QAAS,CACP,CAAE/D,MAAO,GAAKC,MAAO,QACrB,CAAED,MAAO,EAAKC,MAAO,QACrB,CAAED,MAAO,IAAKC,MAAO,QACrB,CAAED,MAAO,EAAKC,MAAO,QACrB,CAAED,MAAO,IAAKC,MAAO,QACrB,CAAED,MAAO,EAAKC,MAAO,SAEvBD,MAAOD,EACP6D,SAAU,SAACI,GAAD,OAAOnB,EAAKtC,SAAS,CAAER,QAASiE,OAE5ChB,EAAArC,EAAAsC,cAACY,EAAA,EAAD,CACEX,UAAU,wBACVY,YAAY,kCACZC,QAAS,CACP,CAAE/D,MAAO,EAAGC,MAAO,oBACnB,CAAED,MAAO,EAAGC,MAAO,sBACnB,CAAED,MAAO,EAAGC,MAAO,yBAErBD,MAAOE,EACP0D,SAAU,SAACI,GAAD,OAAOnB,EAAKtC,SAAS,CAAEL,KAAM8D,OAExCrE,GAASqD,EAAArC,EAAAsC,cAAA,OAAKgB,IAAKC,IAAMhB,UAAU,gBAAgBiB,IAAI,UAE1DnB,EAAArC,EAAAsC,cAACmB,EAAA,EAAD,CAAKlB,UAAU,SAEXtD,GAAQA,EAAKyE,IAAI,SAAAC,GAAC,OAChBtB,EAAArC,EAAAsC,cAACsB,EAAA,EAAD,CAAKC,IAAKF,EAAEG,KAAMvB,UAAU,2BAC1BF,EAAArC,EAAAsC,cAAA,OACEC,UAAS,gGAAAwB,OAEM,IAAXJ,EAAEpD,MAAc,eAFX,4BAAAwD,OAGM,IAAXJ,EAAEpD,MAAc,iBAHX,4BAAAwD,OAIM,IAAXJ,EAAEpD,MAAc,iBAJX,2BAOT8B,EAAArC,EAAAsC,cAAA,OACEC,UAAS,6BAAAwB,OACM,IAAXJ,EAAEpD,MAAc,gCADX,8BAAAwD,OAEM,IAAXJ,EAAEpD,MAAc,gCAFX,6BAKRoD,EAAEG,MAELzB,EAAArC,EAAAsC,cAAA,OAAKC,UAAU,kBAAf,IAAkCoB,EAAEK,SAApC,mBAxIFC,aCElBC,IAASC,OAAO9B,EAAArC,EAAAsC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SFwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3166c0b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component, createRef } from 'react';\r\nimport { Container, Row, Col, Button, Label } from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport dataImport from './data.json';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isRun: false,\r\n    data: dataImport,\r\n    immutableDataFile: null,\r\n    seconds: { value: 1.0, label: '1.0s' },\r\n    type: { value: 0, label: 'Hòa trộn' },\r\n  };\r\n  dataFile = createRef();\r\n\r\n  componentDidMount() {\r\n    // this.setState({ data: dataImport });\r\n  }\r\n\r\n  handleSortData = () => {\r\n    const { data } = this.state;\r\n    this.setState({\r\n      data: [...data].sort((a, b) => 0.5 - Math.random()),\r\n    })\r\n  };\r\n\r\n  handeInterval = () => {\r\n    const { isRun, immutableDataFile, seconds, type } = this.state;\r\n    const flagMix = Math.random() > 0.5 ? 2 : 1;\r\n    const flag = type.value === 0 ? flagMix : type.value;\r\n\r\n    clearInterval(window.timer);\r\n    if (isRun) {\r\n      window.timer = setInterval(() => {\r\n        this.setState({ data: this.createRandomData(immutableDataFile || dataImport, flag)})\r\n      }, seconds.value * 1000);\r\n    }\r\n  };\r\n\r\n  handleImportDataFile = () => {\r\n    try {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const dataJson = JSON.parse(e.target.result);\r\n        this.setState({ data: dataJson, immutableDataFile: dataJson });\r\n      };\r\n      reader.readAsText(this.dataFile.current.files[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  createRandomData = (data, flag) => {\r\n    const rdIndex = Math.floor(Math.random()* data.length);\r\n    const newItem = { ...data[rdIndex], flag };\r\n    const newData = [...data];\r\n\r\n    newData[rdIndex] = newItem;\r\n    console.log(newData)\r\n    return newData;\r\n  };\r\n\r\n\r\n  render() {\r\n    const { isRun, data, seconds, type } = this.state;\r\n\r\n    this.handeInterval();\r\n    console.log(isRun)\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        <Container fluid>\r\n          <div className=\"d-flex pt-3 pb-2\">\r\n            <Button\r\n              className=\"mr-2 mb-3 button-size\" color={isRun ? 'danger' : 'primary'} size=\"sm\"\r\n              onClick={() => this.setState({ isRun: !isRun })}\r\n            >\r\n              {isRun ? 'Dừng lại' : 'Bắt đầu'}\r\n            </Button>\r\n            <Button\r\n              className=\"mr-2 mb-3 button-size\" color=\"primary\" size=\"sm\"\r\n              onClick={this.handleSortData}\r\n            >\r\n              Xáo trộn\r\n            </Button>\r\n            <Label className=\"mr-2 mb-3 btn btn-primary btn-sm button-size\">\r\n              {console.log(this.dataFile.current)}\r\n              {this.dataFile.current && this.dataFile.current.files[0] ? this.dataFile.current.files[0].name : 'Chọn file'}\r\n              <input\r\n                className=\"d-none\" type=\"file\"\r\n                ref={this.dataFile}\r\n                onChange={this.handleImportDataFile}\r\n              />\r\n            </Label>\r\n            <Select\r\n              className=\"mr-2 mb-3 select-size-sm\"\r\n              placeholder=\"Giây\"\r\n              options={[\r\n                { value: 0.5, label: '0.5s' },\r\n                { value: 1.0, label: '1.0s' },\r\n                { value: 1.5, label: '1.5s' },\r\n                { value: 2.0, label: '2.0s' },\r\n                { value: 2.5, label: '2.5s' },\r\n                { value: 3.0, label: '3.0s' },\r\n              ]}\r\n              value={seconds}\r\n              onChange={(v) => this.setState({ seconds: v })}\r\n            />\r\n            <Select\r\n              className=\"mr-2 mb-3 select-size\"\r\n              placeholder=\"Chọn chế độ\"\r\n              options={[\r\n                { value: 0, label: 'Hòa trộn' },\r\n                { value: 1, label: 'Âm cuối ed' },\r\n                { value: 2, label: 'Âm cuối s/es' },\r\n              ]}\r\n              value={type}\r\n              onChange={(v) => this.setState({ type: v })}\r\n            />\r\n            {isRun && <img src={logo} className=\"mb-3 app-logo\" alt=\"logo\" />}\r\n          </div>\r\n          <Row className=\"row-8\">\r\n            {\r\n              data && data.map(d => (\r\n                <Col key={d.word} className=\"col-min-width px-2 mb-3\">\r\n                  <div\r\n                    className={`\r\n                      h-100 p-3 rounded shadow bg-white border-item\r\n                      ${d.flag === 0 && 'border-white'}\r\n                      ${d.flag === 1 && 'border-success'}\r\n                      ${d.flag === 2 && 'border-warning'}\r\n                    `}\r\n                  >\r\n                    <div\r\n                      className={`\r\n                        ${d.flag === 1 && 'font-weight-bold text-success'}\r\n                        ${d.flag === 2 && 'font-weight-bold text-warning'}\r\n                      `}\r\n                    >\r\n                      {d.word}\r\n                    </div>\r\n                    <div className=\"text-secondary\">/{d.spelling}/</div>\r\n                  </div>\r\n                </Col>\r\n              ))\r\n            }\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}